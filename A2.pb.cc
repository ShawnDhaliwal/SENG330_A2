/**
 * @file   A2.pb.cc
 * @Author Shawn Dhaliwal
 * @date   Nov 11, 2015
 * @brief  Generated by A2.proto, using google protocole buffer.
 *
 *
 */

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "A2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SENG330_A2 {

namespace {

const ::google::protobuf::Descriptor* Machine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Machine_reflection_ = NULL;
struct MachineOneofInstance {
  const ::SENG330_A2::Treadmill* treadmill_;
  const ::SENG330_A2::Elliptical* elliptical_;
}* Machine_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Elliptical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Elliptical_reflection_ = NULL;
const ::google::protobuf::Descriptor* Treadmill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Treadmill_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_A2_2eproto() {
  protobuf_AddDesc_A2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "A2.proto");
  GOOGLE_CHECK(file != NULL);
  Machine_descriptor_ = file->message_type(0);
  static const int Machine_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Machine_default_oneof_instance_, treadmill_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Machine_default_oneof_instance_, elliptical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, subtypes_),
  };
  Machine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Machine_descriptor_,
      Machine::default_instance_,
      Machine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, _has_bits_[0]),
      -1,
      -1,
      Machine_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, _oneof_case_[0]),
      sizeof(Machine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, _internal_metadata_),
      -1);
  Elliptical_descriptor_ = file->message_type(1);
  static const int Elliptical_offsets_[1] = {
  };
  Elliptical_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Elliptical_descriptor_,
      Elliptical::default_instance_,
      Elliptical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Elliptical, _has_bits_[0]),
      -1,
      -1,
      sizeof(Elliptical),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Elliptical, _internal_metadata_),
      -1);
  Treadmill_descriptor_ = file->message_type(2);
  static const int Treadmill_offsets_[1] = {
  };
  Treadmill_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Treadmill_descriptor_,
      Treadmill::default_instance_,
      Treadmill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treadmill, _has_bits_[0]),
      -1,
      -1,
      sizeof(Treadmill),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treadmill, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_A2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Machine_descriptor_, &Machine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Elliptical_descriptor_, &Elliptical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Treadmill_descriptor_, &Treadmill::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_A2_2eproto() {
  delete Machine::default_instance_;
  delete Machine_default_oneof_instance_;
  delete Machine_reflection_;
  delete Elliptical::default_instance_;
  delete Elliptical_reflection_;
  delete Treadmill::default_instance_;
  delete Treadmill_reflection_;
}

void protobuf_AddDesc_A2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010A2.proto\022\nSENG330_A2\"o\n\007Machine\022*\n\tTre"
    "admill\030\001 \001(\0132\025.SENG330_A2.TreadmillH\000\022,\n"
    "\nElliptical\030\002 \001(\0132\026.SENG330_A2.Elliptica"
    "lH\000B\n\n\010subtypes\"\014\n\nElliptical\"\013\n\tTreadmi"
    "ll", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "A2.proto", &protobuf_RegisterTypes);
  Machine::default_instance_ = new Machine();
  Machine_default_oneof_instance_ = new MachineOneofInstance();
  Elliptical::default_instance_ = new Elliptical();
  Treadmill::default_instance_ = new Treadmill();
  Machine::default_instance_->InitAsDefaultInstance();
  Elliptical::default_instance_->InitAsDefaultInstance();
  Treadmill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_A2_2eproto);
}

    //!  Produced by google protocole buffer compiler.
    /*!
    */
    struct StaticDescriptorInitializer_A2_2eproto {
  StaticDescriptorInitializer_A2_2eproto() {
    protobuf_AddDesc_A2_2eproto();
  }
} static_descriptor_initializer_A2_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine::kTreadmillFieldNumber;
const int Machine::kEllipticalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine::Machine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SENG330_A2.Machine)
}

void Machine::InitAsDefaultInstance() {
  Machine_default_oneof_instance_->treadmill_ = const_cast< ::SENG330_A2::Treadmill*>(&::SENG330_A2::Treadmill::default_instance());
  Machine_default_oneof_instance_->elliptical_ = const_cast< ::SENG330_A2::Elliptical*>(&::SENG330_A2::Elliptical::default_instance());
}

Machine::Machine(const Machine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SENG330_A2.Machine)
}

void Machine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_subtypes();
}

Machine::~Machine() {
  // @@protoc_insertion_point(destructor:SENG330_A2.Machine)
  SharedDtor();
}

void Machine::SharedDtor() {
  if (has_subtypes()) {
    clear_subtypes();
  }
  if (this != default_instance_) {
  }
}

void Machine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Machine_descriptor_;
}

const Machine& Machine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_A2_2eproto();
  return *default_instance_;
}

Machine* Machine::default_instance_ = NULL;

Machine* Machine::New(::google::protobuf::Arena* arena) const {
  Machine* n = new Machine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Machine::clear_subtypes() {
  switch(subtypes_case()) {
    case kTreadmill: {
      delete subtypes_.treadmill_;
      break;
    }
    case kElliptical: {
      delete subtypes_.elliptical_;
      break;
    }
    case SUBTYPES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBTYPES_NOT_SET;
}


void Machine::Clear() {
  clear_subtypes();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Machine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SENG330_A2.Machine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SENG330_A2.Treadmill Treadmill = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treadmill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Elliptical;
        break;
      }

      // optional .SENG330_A2.Elliptical Elliptical = 2;
      case 2: {
        if (tag == 18) {
         parse_Elliptical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elliptical()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SENG330_A2.Machine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SENG330_A2.Machine)
  return false;
#undef DO_
}

void Machine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SENG330_A2.Machine)
  // optional .SENG330_A2.Treadmill Treadmill = 1;
  if (has_treadmill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *subtypes_.treadmill_, output);
  }

  // optional .SENG330_A2.Elliptical Elliptical = 2;
  if (has_elliptical()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *subtypes_.elliptical_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SENG330_A2.Machine)
}

::google::protobuf::uint8* Machine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SENG330_A2.Machine)
  // optional .SENG330_A2.Treadmill Treadmill = 1;
  if (has_treadmill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *subtypes_.treadmill_, target);
  }

  // optional .SENG330_A2.Elliptical Elliptical = 2;
  if (has_elliptical()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *subtypes_.elliptical_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SENG330_A2.Machine)
  return target;
}

int Machine::ByteSize() const {
  int total_size = 0;

  switch (subtypes_case()) {
    // optional .SENG330_A2.Treadmill Treadmill = 1;
    case kTreadmill: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtypes_.treadmill_);
      break;
    }
    // optional .SENG330_A2.Elliptical Elliptical = 2;
    case kElliptical: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *subtypes_.elliptical_);
      break;
    }
    case SUBTYPES_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Machine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Machine::MergeFrom(const Machine& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.subtypes_case()) {
    case kTreadmill: {
      mutable_treadmill()->::SENG330_A2::Treadmill::MergeFrom(from.treadmill());
      break;
    }
    case kElliptical: {
      mutable_elliptical()->::SENG330_A2::Elliptical::MergeFrom(from.elliptical());
      break;
    }
    case SUBTYPES_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Machine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine::CopyFrom(const Machine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine::IsInitialized() const {

  return true;
}

void Machine::Swap(Machine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine::InternalSwap(Machine* other) {
  std::swap(subtypes_, other->subtypes_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Machine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Machine_descriptor_;
  metadata.reflection = Machine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Machine

// optional .SENG330_A2.Treadmill Treadmill = 1;
bool Machine::has_treadmill() const {
  return subtypes_case() == kTreadmill;
}
void Machine::set_has_treadmill() {
  _oneof_case_[0] = kTreadmill;
}
void Machine::clear_treadmill() {
  if (has_treadmill()) {
    delete subtypes_.treadmill_;
    clear_has_subtypes();
  }
}
 const ::SENG330_A2::Treadmill& Machine::treadmill() const {
  // @@protoc_insertion_point(field_get:SENG330_A2.Machine.Treadmill)
  return has_treadmill()
      ? *subtypes_.treadmill_
      : ::SENG330_A2::Treadmill::default_instance();
}
::SENG330_A2::Treadmill* Machine::mutable_treadmill() {
  if (!has_treadmill()) {
    clear_subtypes();
    set_has_treadmill();
    subtypes_.treadmill_ = new ::SENG330_A2::Treadmill;
  }
  // @@protoc_insertion_point(field_mutable:SENG330_A2.Machine.Treadmill)
  return subtypes_.treadmill_;
}
::SENG330_A2::Treadmill* Machine::release_treadmill() {
  if (has_treadmill()) {
    clear_has_subtypes();
    ::SENG330_A2::Treadmill* temp = subtypes_.treadmill_;
    subtypes_.treadmill_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Machine::set_allocated_treadmill(::SENG330_A2::Treadmill* treadmill) {
  clear_subtypes();
  if (treadmill) {
    set_has_treadmill();
    subtypes_.treadmill_ = treadmill;
  }
  // @@protoc_insertion_point(field_set_allocated:SENG330_A2.Machine.Treadmill)
}

// optional .SENG330_A2.Elliptical Elliptical = 2;
bool Machine::has_elliptical() const {
  return subtypes_case() == kElliptical;
}
void Machine::set_has_elliptical() {
  _oneof_case_[0] = kElliptical;
}
void Machine::clear_elliptical() {
  if (has_elliptical()) {
    delete subtypes_.elliptical_;
    clear_has_subtypes();
  }
}
 const ::SENG330_A2::Elliptical& Machine::elliptical() const {
  // @@protoc_insertion_point(field_get:SENG330_A2.Machine.Elliptical)
  return has_elliptical()
      ? *subtypes_.elliptical_
      : ::SENG330_A2::Elliptical::default_instance();
}
::SENG330_A2::Elliptical* Machine::mutable_elliptical() {
  if (!has_elliptical()) {
    clear_subtypes();
    set_has_elliptical();
    subtypes_.elliptical_ = new ::SENG330_A2::Elliptical;
  }
  // @@protoc_insertion_point(field_mutable:SENG330_A2.Machine.Elliptical)
  return subtypes_.elliptical_;
}
::SENG330_A2::Elliptical* Machine::release_elliptical() {
  if (has_elliptical()) {
    clear_has_subtypes();
    ::SENG330_A2::Elliptical* temp = subtypes_.elliptical_;
    subtypes_.elliptical_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Machine::set_allocated_elliptical(::SENG330_A2::Elliptical* elliptical) {
  clear_subtypes();
  if (elliptical) {
    set_has_elliptical();
    subtypes_.elliptical_ = elliptical;
  }
  // @@protoc_insertion_point(field_set_allocated:SENG330_A2.Machine.Elliptical)
}

bool Machine::has_subtypes() const {
  return subtypes_case() != SUBTYPES_NOT_SET;
}
void Machine::clear_has_subtypes() {
  _oneof_case_[0] = SUBTYPES_NOT_SET;
}
Machine::SubtypesCase Machine::subtypes_case() const {
  return Machine::SubtypesCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Elliptical::Elliptical()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SENG330_A2.Elliptical)
}

void Elliptical::InitAsDefaultInstance() {
}

Elliptical::Elliptical(const Elliptical& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SENG330_A2.Elliptical)
}

void Elliptical::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Elliptical::~Elliptical() {
  // @@protoc_insertion_point(destructor:SENG330_A2.Elliptical)
  SharedDtor();
}

void Elliptical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Elliptical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Elliptical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Elliptical_descriptor_;
}

const Elliptical& Elliptical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_A2_2eproto();
  return *default_instance_;
}

Elliptical* Elliptical::default_instance_ = NULL;

Elliptical* Elliptical::New(::google::protobuf::Arena* arena) const {
  Elliptical* n = new Elliptical;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Elliptical::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Elliptical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SENG330_A2.Elliptical)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SENG330_A2.Elliptical)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SENG330_A2.Elliptical)
  return false;
#undef DO_
}

void Elliptical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SENG330_A2.Elliptical)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SENG330_A2.Elliptical)
}

::google::protobuf::uint8* Elliptical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SENG330_A2.Elliptical)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SENG330_A2.Elliptical)
  return target;
}

int Elliptical::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Elliptical::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Elliptical* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Elliptical>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Elliptical::MergeFrom(const Elliptical& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Elliptical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Elliptical::CopyFrom(const Elliptical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Elliptical::IsInitialized() const {

  return true;
}

void Elliptical::Swap(Elliptical* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Elliptical::InternalSwap(Elliptical* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Elliptical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Elliptical_descriptor_;
  metadata.reflection = Elliptical_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Elliptical

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Treadmill::Treadmill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SENG330_A2.Treadmill)
}

void Treadmill::InitAsDefaultInstance() {
}

Treadmill::Treadmill(const Treadmill& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SENG330_A2.Treadmill)
}

void Treadmill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Treadmill::~Treadmill() {
  // @@protoc_insertion_point(destructor:SENG330_A2.Treadmill)
  SharedDtor();
}

void Treadmill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Treadmill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Treadmill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Treadmill_descriptor_;
}

const Treadmill& Treadmill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_A2_2eproto();
  return *default_instance_;
}

Treadmill* Treadmill::default_instance_ = NULL;

Treadmill* Treadmill::New(::google::protobuf::Arena* arena) const {
  Treadmill* n = new Treadmill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Treadmill::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Treadmill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SENG330_A2.Treadmill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SENG330_A2.Treadmill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SENG330_A2.Treadmill)
  return false;
#undef DO_
}

void Treadmill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SENG330_A2.Treadmill)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SENG330_A2.Treadmill)
}

::google::protobuf::uint8* Treadmill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SENG330_A2.Treadmill)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SENG330_A2.Treadmill)
  return target;
}

int Treadmill::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Treadmill::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Treadmill* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Treadmill>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Treadmill::MergeFrom(const Treadmill& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Treadmill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Treadmill::CopyFrom(const Treadmill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treadmill::IsInitialized() const {

  return true;
}

void Treadmill::Swap(Treadmill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Treadmill::InternalSwap(Treadmill* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Treadmill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Treadmill_descriptor_;
  metadata.reflection = Treadmill_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Treadmill

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SENG330_A2

// @@protoc_insertion_point(global_scope)
